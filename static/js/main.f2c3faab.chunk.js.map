{"version":3,"sources":["Header.js","VariantSelector.js","Product.js","Collection.js","CollectionViewer.js","Cart.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","storeName","Component","VariantSelector","_this","onChange","handleSelect","name","option","key","values","map","value","concat","id","Product","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedVariant","product","variants","edges","node","selectedOptions","assign","apply","toConsumableArray","options","defineProperty","bind","assertThisInitialized","handleQuantity","event","target","find","variant","every","selectedOption","setState","console","log","variantQuantity","parseInt","_this2","objectSpread","variantSelect","VariantSelector_VariantSelector","src","images","originalSrc","alt","altText","title","priceV2","amount","for","type","min","max","onClick","addVariantToCart","productName","Collection","collectionName","collection","Product_Product","CollectionViewer","selectedCollectionIndex","selectedCollectionTitle","handleChange","selectedIndex","htmlFor","collections","Collection_Collection","products","CheckoutFragment","gql","_templateObject","checkoutCreate","_templateObject2","Cart","checkoutLineItems","currentLineItems","lineItem","variantId","quantity","react_apollo_esm","mutation","variables","input","lineItems","onCompleted","data","window","open","checkout","webUrl","checkoutCreateTrigger","length","App","loading","error","message","Header_Header","shop","CollectionViewer_CollectionViewer","Cart_Cart","createCheckout","query","App_templateObject","AppWithData","graphql","Boolean","location","hostname","match","httpLink","createHttpLink","uri","headers","X-Shopify-Storefront-Access-Token","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAGqBA,gMAEjB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAwBC,KAAKC,MAAMC,WACjDN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8CANeI,8BCDfC,0LACX,IAAAC,EAAAL,KACN,OACEJ,EAAAC,EAAAC,cAAA,UACEQ,SAAUN,KAAKC,MAAMM,aACrBC,KAAMR,KAAKC,MAAMQ,OAAOD,KACxBE,IAAKV,KAAKC,MAAMQ,OAAOD,MAErBR,KAAKC,MAAMQ,OAAOE,OAAOC,IAAI,SAAAC,GAC7B,OAAOjB,EAAAC,EAAAC,cAAA,UAAQe,MAAOA,EAAOH,IAAG,GAAAI,OAAKD,EAAL,KAAAC,OAAcT,EAAKJ,MAAMQ,OAAOM,KAAOF,aATpCV,cCExBa,cACnB,SAAAA,EAAYf,GAAM,IAAAI,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAjB,KAAAgB,IAChBX,EAAAY,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAArB,KAAMC,KAEDqB,MAAQ,CACXC,gBAAiBlB,EAAKJ,MAAMuB,QAAQC,SAASC,MAAM,GAAGC,KACtDC,gBAAiBX,OAAOY,OAAPC,MAAAb,OAAMA,OAAAc,EAAA,EAAAd,CAAWZ,EAAKJ,MAAMuB,QAAQQ,QAAQpB,IAAI,SAAAH,GAAM,OAAAQ,OAAAgB,EAAA,EAAAhB,CAAA,GAAOR,EAAOD,KAAMC,EAAOE,OAAO,SAG3GN,EAAKE,aAAeF,EAAKE,aAAa2B,KAAlBjB,OAAAkB,EAAA,EAAAlB,CAAAZ,IACpBA,EAAK+B,eAAiB/B,EAAK+B,eAAeF,KAApBjB,OAAAkB,EAAA,EAAAlB,CAAAZ,IATNA,4EAYLgC,GACX,IAAIT,EAAkB5B,KAAKsB,MAAMM,gBACjCA,EAAgBS,EAAMC,OAAO9B,MAAQ6B,EAAMC,OAAOzB,MAClD,IAAIU,EAAkBvB,KAAKC,MAAMuB,QAAQC,SAASC,MAAMa,KAAK,SAAAC,GAC3D,OAAOA,EAAQb,KAAKC,gBAAgBa,MAAM,SAAAC,GACxC,OAAOd,EAAgBc,EAAelC,QAAUkC,EAAe7B,UAEhEc,KAEH3B,KAAK2C,SAAS,CACZpB,oBAEFqB,QAAQC,IAAI7C,KAAKsB,MAAMC,wDAGVc,GACbrC,KAAK2C,SAAS,CACZG,gBAAiBC,SAASV,EAAMC,OAAOzB,0CAIlC,IAAAmC,EAAAhD,KACHwB,EAAOP,OAAAgC,EAAA,EAAAhC,CAAA,GAAOjB,KAAKC,MAAMuB,SACzBgB,EAAUxC,KAAKsB,MAAMC,gBACrB2B,EAAgB1B,EAAQQ,QAAQpB,IAAI,SAAAH,GACtC,OAAOb,EAAAC,EAAAC,cAACqD,EAAD,CAAiBzC,IAAKD,EAAOM,GAAIN,OAAQA,EAAQF,aAAcyC,EAAKzC,iBAG7E,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBqD,IAAK5B,EAAQ6B,OAAO3B,MAAM,GAAGC,KAAK2B,YAAaC,IAAK/B,EAAQ6B,OAAO3B,MAAM,GAAGC,KAAK6B,UACjH5D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkByB,EAAQiC,OACxC7D,EAAAC,EAAAC,cAAA,aAAK0C,EAAQkB,QAAQC,QACQ,UAA5BnC,EAAQQ,QAAQ,GAAGxB,KAAmB0C,EAAgB,GACvDtD,EAAAC,EAAAC,cAAA,SAAO8D,IAAI,oBAAX,YACAhE,EAAAC,EAAAC,cAAA,SAAOiB,GAAG,mBAAmB8C,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKzD,SAAUN,KAAKoC,iBAE3ExC,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACViE,QAAS,WAAOhB,EAAK/C,MAAMgE,iBAAXhD,OAAAgC,EAAA,EAAAhC,CAAA,GACR+B,EAAK1B,MAAMC,gBADH,CACoB2C,YAAalB,EAAK/C,MAAMuB,QAAQiC,QAChET,EAAK1B,MAAMwB,iBAAmB,KAJpC,uBAlD6B3C,aCAhBgE,0LACX,IAAA9D,EAAAL,KACN,OACEJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBC,KAAKC,MAAMmE,gBAC9CxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACZC,KAAKC,MAAMoE,WAAWzD,IAAI,SAAAY,GAEzB,OADAA,EAAUA,EAAQG,KACX/B,EAAAC,EAAAC,cAACwE,EAAD,CAAS5D,IAAKc,EAAQT,GAAIS,QAASA,EAASyC,iBAAkB5D,EAAKJ,MAAMgE,8BARpD9D,cCDnBoE,cAEnB,SAAAA,EAAYtE,GAAM,IAAAI,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAjB,KAAAuE,IAChBlE,EAAAY,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAsD,GAAAlD,KAAArB,KAAMC,KACDqB,MAAQ,CACXkD,wBAAyB,EACzBC,wBAAyB,IAE3BpE,EAAKqE,aAAerE,EAAKqE,aAAaxC,KAAlBjB,OAAAkB,EAAA,EAAAlB,CAAAZ,IANJA,4EASLgC,GACXrC,KAAK2C,SAAS,CACZ6B,wBAAyBnC,EAAMC,OAAOqC,cAAc,EACpDF,wBAAyBpC,EAAMC,OAAOzB,yCAKxC,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO8E,QAAQ,qBAAf,wBACAhF,EAAAC,EAAAC,cAAA,UAAQiB,GAAG,oBAAoBT,SAAUN,KAAK0E,aAAc7D,MAAM,IAChEjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,IAAd,uBACCb,KAAKC,MAAM4E,YAAYnD,MAAMd,IAAI,SAACyD,GACjC,OAAOzE,EAAAC,EAAAC,cAAA,UAAQY,IAAK2D,EAAW1C,KAAKZ,GAAIF,MAAOwD,EAAW1C,KAAK8B,OAAQY,EAAW1C,KAAK8B,UAG3F7D,EAAAC,EAAAC,cAACgF,EAAD,CAAYV,eAAgBpE,KAAKsB,MAAMmD,wBAAyBR,iBAAkBjE,KAAKC,MAAMgE,iBAAkBI,WAAYrE,KAAKC,MAAM4E,YAAYnD,MAAM1B,KAAKsB,MAAMkD,yBAAyB7C,KAAKoD,SAASrD,gBA5BpKvB,0yBCC9C,IAAI6E,EAAmBC,IAAHC,KA2BhBC,EAAiBF,IAAHG,IAYdJ,GAGiBK,cACnB,SAAAA,EAAYpF,GAAM,IAAAI,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAjB,KAAAqF,IAChBhF,EAAAY,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAoE,GAAAhE,KAAArB,KAAMC,KACDqB,MAAQ,GAFGjB,wEAMhB,IAAIiF,EAAoBtF,KAAKC,MAAMsF,iBAAiB3E,IAAI,SAAA4E,GACtD,MAAO,CAACC,UAAWD,EAAShD,QAAQzB,GAAI2E,SAAUF,EAASE,YAE7D,OACE9F,EAAAC,EAAAC,cAAA,WACGE,KAAKC,MAAMsF,iBAAiB3E,IAAI,SAAA4E,GAC/B,OAAO5F,EAAAC,EAAAC,cAAA,KAAGY,IAAK8E,EAAShD,QAAQzB,IAC7ByE,EAAShD,QAAQ0B,YACU,kBAA3BsB,EAAShD,QAAQiB,MAAjB,MAAA3C,OAAmD0E,EAAShD,QAAQiB,OAAU,MAGnF7D,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACEC,SAAUT,EACVU,UAAW,CAACC,MAAM,CAACC,UAAUT,IAC7BU,YAAa,SAACC,GAAUC,OAAOC,KAAKF,EAAKd,eAAeiB,SAASC,UAEhE,SAACC,GAAD,OACD1G,EAAAC,EAAAC,cAAA,WACGwF,EAAkBiB,OAAS,EAAI3G,EAAAC,EAAAC,cAAA,UAAQkE,QAASsC,GAAjB,YAA4D,cAzBtEnG,wzCCtC5BqG,cAEJ,SAAAA,IAAc,IAAAnG,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAjB,KAAAwG,IACZnG,EAAAY,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAuF,GAAAnF,KAAArB,QAEKsB,MAAQ,CACXiE,iBAAkB,IAGpBlF,EAAK4D,iBAAmB5D,EAAK4D,iBAAiB/B,KAAtBjB,OAAAkB,EAAA,EAAAlB,CAAAZ,IAPZA,gFAUGmC,EAASkD,GACxB,IAAIF,EAAW,CAAChD,UAASkD,YACzB,OAAO1F,KAAK2C,SAAS,CAAC4C,iBAAgB,GAAAzE,OAAAG,OAAAc,EAAA,EAAAd,CAAKjB,KAAKsB,MAAMiE,kBAAhB,CAAkCC,uCAKxE,OAAIxF,KAAKC,MAAMgG,KAAKQ,QACX7G,EAAAC,EAAAC,cAAA,wBAELE,KAAKC,MAAMgG,KAAKS,MACX9G,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMgG,KAAKS,MAAMC,UAEnC/D,QAAQC,IAAI7C,KAAKsB,OAEf1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC8G,EAAD,CAAQ1G,UAAWF,KAAKC,MAAMgG,KAAKY,KAAKrG,OACxCZ,EAAAC,EAAAC,cAACgH,EAAD,CAAkBjC,YAAa7E,KAAKC,MAAMgG,KAAKpB,YAAaZ,iBAAkBjE,KAAKiE,mBACnFrE,EAAAC,EAAAC,cAACiH,EAAD,CAAMxB,iBAAkBvF,KAAKsB,MAAMiE,iBAAkBa,SAAUpG,KAAKgH,0BA9B5D7G,aAmCZ8G,EAAQhC,IAAHiC,KA2DIC,EAFKC,YAAQH,EAARG,CAAeZ,GCxFfa,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,uFCRAC,EAAWC,YAAe,CAC7BC,IAAK,oDACLC,QAAS,CACRC,oCAAqC,sCAInCC,EAAS,IAAIC,IAAa,CAC9BC,KAAMP,EACNQ,MAAO,IAAIC,MAGbC,IAASC,OACPxI,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CAAgBmC,OAAQA,GACtBlI,EAAAC,EAAAC,cAACuI,EAAD,OAEFC,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f2c3faab.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Header.css';\n\nexport default class Header extends Component { \n  render(){ \n    return(\n      <section className=\"header\">\n        <i className=\"fas fa-user header__icon\"></i>\n        <h1 className=\"header__store-title\">{ this.props.storeName }</h1>\n        <i className=\"fas fa-shopping-cart header__icon\"></i>\n      </section>   \n    );\n  }\n}\n\n","import React, { Component } from 'react'; \n\nexport default class VariantSelector extends Component { \n  render(){\n    return(  \n      <select \n        onChange={this.props.handleSelect}\n        name={this.props.option.name}\n        key={this.props.option.name}\n        >\n        { this.props.option.values.map(value => { \n          return <option value={value} key={`${value}-${this.props.option.id}`}>{value}</option>\n        })}\n      </select>\n    )\n    \n  }\n}\n// generates each select for product options \n// handleSelect is passed down from product such that action is passed up","import React, { Component } from 'react';\nimport './Product.css'\nimport VariantSelector from './VariantSelector';\n\nexport default class Product extends Component {\n  constructor(props){ \n    super(props)\n\n    this.state = {\n      selectedVariant: this.props.product.variants.edges[0].node,\n      selectedOptions: Object.assign(...this.props.product.options.map(option => ({[option.name]:option.values[0]})))\n    }\n\n    this.handleSelect = this.handleSelect.bind(this)\n    this.handleQuantity = this.handleQuantity.bind(this)\n  }\n\n  handleSelect(event){ \n    let selectedOptions = this.state.selectedOptions\n    selectedOptions[event.target.name] = event.target.value \n    let selectedVariant = this.props.product.variants.edges.find(variant => { \n      return variant.node.selectedOptions.every(selectedOption => { \n        return selectedOptions[selectedOption.name] === selectedOption.value\n      })\n    }).node\n    \n    this.setState({\n      selectedVariant\n    })\n    console.log(this.state.selectedVariant)\n  }\n\n  handleQuantity(event){ \n    this.setState({\n      variantQuantity: parseInt(event.target.value)\n    })\n  }\n\n  render() {\n    let product = {...this.props.product}\n    let variant = this.state.selectedVariant\n    let variantSelect = product.options.map(option => {\n      return <VariantSelector key={option.id} option={option} handleSelect={this.handleSelect}/>\n    })\n\n    return (\n      <div className=\"product\">\n        <img className=\"product__image\" src={product.images.edges[0].node.originalSrc} alt={product.images.edges[0].node.altText}/>\n        <h3 className=\"product__title\">{product.title}</h3>\n        <p>${variant.priceV2.amount}</p>\n        {product.options[0].name !== \"Title\" ? variantSelect : \"\" } \n        <label for=\"quantitySelector\">Quantity</label>\n        <input id=\"quantitySelector\" type=\"number\" min=\"1\" max=\"10\" onChange={this.handleQuantity}/>\n\n        <button \n          className=\"product__button\" \n          onClick={() => {this.props.addVariantToCart(\n              {...this.state.selectedVariant, productName: this.props.product.title},\n              this.state.variantQuantity || 1\n          )}}>\n          Add to Cart\n        </button>\n      </div> \n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport Product from './Product';\nimport './Collection.css'\n\nexport default class Collection extends Component{ \n  render(){\n    return(\n      <section className=\"collection\">\n        <h2 className=\"collection__title\">{this.props.collectionName}</h2>\n        <div className=\"collection__product-container\">\n          {this.props.collection.map(product => {\n            product = product.node\n            return <Product key={product.id} product={product} addVariantToCart={this.props.addVariantToCart}/>\n          })}\n        </div>\n      </section>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport Collection from \"./Collection\";\n\nexport default class CollectionViewer extends Component { \n\n  constructor(props){ \n    super(props)\n    this.state = { \n      selectedCollectionIndex: 0,\n      selectedCollectionTitle: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event){ \n    this.setState({\n      selectedCollectionIndex: event.target.selectedIndex-1,\n      selectedCollectionTitle: event.target.value\n    })\n  }\n\n  render(){ \n    return(\n      <div>\n        <label htmlFor=\"collection-select\">Select a Collection:</label>\n        <select id=\"collection-select\" onChange={this.handleChange} value=\"\">\n          <option value=\"\">Select a Collection</option>\n          {this.props.collections.edges.map((collection) => { \n            return <option key={collection.node.id} value={collection.node.title}>{collection.node.title}</option>\n          })}\n        </select>\n        <Collection collectionName={this.state.selectedCollectionTitle} addVariantToCart={this.props.addVariantToCart} collection={this.props.collections.edges[this.state.selectedCollectionIndex].node.products.edges}/>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag'\nimport { Mutation } from 'react-apollo';\n\nlet CheckoutFragment = gql`\n  fragment CheckoutFragment on Checkout {\n    id\n    webUrl\n    totalTax\n    subtotalPrice\n    totalPrice\n    lineItems (first: 250) {\n      edges {\n        node {\n          id\n          title\n          variant {\n            id\n            title\n            image {\n              src\n            }\n            price\n          }\n          quantity\n        }\n      }\n    }\n  }\n`;\n\nlet checkoutCreate = gql`\n  mutation checkoutCreate($input: CheckoutCreateInput!){\n    checkoutCreate(input: $input) {\n      userErrors {\n        message\n        field\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`\n\nexport default class Cart extends Component { \n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render() { \n    let checkoutLineItems = this.props.currentLineItems.map(lineItem => { \n      return {variantId: lineItem.variant.id, quantity: lineItem.quantity }\n    })\n    return(\n      <div>       \n        {this.props.currentLineItems.map(lineItem => { \n          return <p key={lineItem.variant.id}>\n            {lineItem.variant.productName} \n            {lineItem.variant.title !== \"Default Title\" ? ` - ${lineItem.variant.title}` : \"\" } \n            </p>\n        })}\n        <Mutation \n          mutation={checkoutCreate} \n          variables={{input:{lineItems:checkoutLineItems}}}\n          onCompleted={(data)=> { window.open(data.checkoutCreate.checkout.webUrl) }}\n        >\n          {(checkoutCreateTrigger ) => \n          <div> \n            {checkoutLineItems.length > 0 ? <button onClick={checkoutCreateTrigger}>Checkout</button> : \"\"}\n          </div>\n          }\n        </Mutation>\n      </div> \n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport CollectionViewer from './CollectionViewer';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Cart from './Cart';\n\nclass App extends Component {\n  \n  constructor() { \n    super();\n\n    this.state = {\n      currentLineItems: []\n    }\n\n    this.addVariantToCart = this.addVariantToCart.bind(this)\n  }\n\n  addVariantToCart(variant, quantity) { \n    let lineItem = {variant, quantity}\n    return this.setState({currentLineItems:[...this.state.currentLineItems, lineItem]})\n  }\n\n  render() {\n\n    if (this.props.data.loading) {\n      return <p>Loading ...</p>;\n    }\n    if (this.props.data.error) {\n      return <p>{this.props.data.error.message}</p>;\n    }\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n          <Header storeName={this.props.data.shop.name}/>\n          <CollectionViewer collections={this.props.data.collections} addVariantToCart={this.addVariantToCart} />\n          <Cart currentLineItems={this.state.currentLineItems} checkout={this.createCheckout}></Cart>\n      </div>\n    );\n  }\n}\nconst query = gql `\n  query { \n    shop { \n      name\n      description\n    }\n    collections(first:20){ \n      edges { \n        node {\n          title\n          id\n          products(first:20){ \n            edges { \n              node { \n                id\n                title\n                options { \n                  id\n                  name\n                  values\n                }\n                images(first:10){\n                  edges {\n                    node { \n                      originalSrc\n                      altText\n                    }\n                  }\n                }\n                variants(first:20){ \n                  edges { \n                    node { \n                      id \n                      title\n                      selectedOptions { \n                        name\n                        value\n                      }\n                      image { \n                        src\n                      } \n                      priceV2 {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst AppWithData = graphql(query)(App); //creates a HOC for app such that query data can be passed down as props\n\nexport default AppWithData;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nconst httpLink = createHttpLink({\n   uri: 'https://kewl-store-bruh.myshopify.com/api/graphql',\n   headers: {\n    'X-Shopify-Storefront-Access-Token': '1472f8f00e9ead5d8affe5709a8be98b'\n  } \n})\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}